{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","numLeft","numLeftActive","operator","numRight","numRightActive","result","setNumber","n","numUpdatedLeft","join","numUpdatedLeftInt","parseInt","setState","numUpdatedRight","numUpdatedRightInt","setOperator","o","clear","setResult","finalResult","className","this","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dc4686ca.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n \n  state = {\n    numLeft: [],\n    numLeftActive: true,\n    operator: \"\",\n    numRight: [],\n    numRightActive: false,\n    result: 0\n  }\n\nsetNumber = (n) => {\n  if (this.state.numLeftActive) {\n    let numUpdatedLeft = [...this.state.numLeft, n].join(\"\");\n    let numUpdatedLeftInt = parseInt(numUpdatedLeft);\n    this.setState({\n      numLeft: [numUpdatedLeftInt],\n    }); \n  } else if (this.state.numRightActive) {\n    let numUpdatedRight = [...this.state.numRight, n ].join(\"\");\n    let numUpdatedRightInt = parseInt(numUpdatedRight);\n    this.setState({\n      numRight: [numUpdatedRightInt],\n    });\n  }\n}\n\nsetOperator = (o) => {\n  this.setState({\n    numLeftActive: false,\n    operator: o,\n    numRightActive: true,\n  });\n}\n\nclear = () => {\n  this.setState({\n    numLeft: [],\n    numLeftActive: true,\n    operator: \"\",\n    numRight: [],\n    numRightActive: false,\n    result: 0\n  });\n}\n\nsetResult = () => {\n  if (this.state.numLeft && this.state.numRight) {\n    let finalResult = 0;\n    if (this.state.operator === \"+\") {\n      finalResult = + this.state.numLeft + + this.state.numRight;\n    } else if (this.state.operator === \"-\") {\n      finalResult = this.state.numLeft - this.state.numRight;\n    } else if (this.state.operator === \"x\") {\n      finalResult = this.state.numLeft * this.state.numRight;\n    } else if (this.state.operator === \"/\") {\n      finalResult = this.state.numLeft / this.state.numRight;\n    } else {\n      finalResult = 0;\n    }\n    this.setState({\n      result: finalResult\n    });\n  }\n}\n\n  render() {\n\n    return (\n     <div className=\"main\">\n\n      <div>\n        <h1>Lauren's Calculator</h1><br/>\n        <h2 className =\"display\">{this.state.result}</h2> \n      </div>\n\n      <div className=\"container\">\n     \n        <div className=\"numbers\" onClick={ () => this.setNumber(1) }>1</div>\n        <div className=\"numbers\" onClick={ () => this.setNumber(2) }>2</div>\n        <div className=\"numbers\" onClick={ () => this.setNumber(3) }>3</div>\n        <div className=\"operators1\" onClick={ () => this.setOperator(\"+\")}>+</div>\n        \n        <div className=\"numbers\" onClick={ () => this.setNumber(4) }>4</div>\n        <div className=\"numbers\" onClick={ () => this.setNumber(5) }>5</div>\n        <div className=\"numbers\" onClick={ () => this.setNumber(6) }>6</div>\n        <div className=\"operators1\" onClick={ () => this.setOperator(\"-\")}>-</div>\n      \n        <div className=\"numbers\" onClick={ () => this.setNumber(7) }>7</div>\n        <div className=\"numbers\" onClick={ () => this.setNumber(8) }>8</div>\n        <div className=\"numbers\" onClick={ () => this.setNumber(9) }>9</div>\n        <div className=\"operators\" onClick={ () => this.setOperator(\"x\")}>x</div>\n        \n        <div className=\"cleared\" onClick={ () => this.clear(\"clear\")}>clear</div>  \n        <div className=\"numbers\" onClick={ () => this.setNumber(0) }>0</div>\n        <div className=\"equals\" onClick={this.setResult}>=</div>\n        <div className=\"operators\" onClick={ () => this.setOperator(\"/\")}>/</div> \n      </div>    \n\n    </div> \n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n \n    <App />,\n  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}